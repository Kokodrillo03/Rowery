AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
    Default: rowerowydolnyslask.pl
  HostedZoneId:
    Type: String
    Default: Z10267972BH9QQFAZ5C7I
  GraphHopperApiKey:
    Type: String
    NoEcho: true
    Description: 'The API key for GraphHopper'
  DocumentDBPassword:
    Type: String
    NoEcho: true
    Description: 'The password for the DocumentDB admin user'
  AppBucketName:
    Type: String
  GraphHopperApiUrl:
    Type: String
    Default: https://graphhopper.com/api/1

Resources:

  # Frontend S3 Bucket
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AppBucketName
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: [ "*" ]
            AllowedMethods: [ "GET", "HEAD" ]
            AllowedOrigins: [ "*" ]

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketName: !Sub '${DomainName}-assets'
      AccessControl: Private

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${DomainName}-assets/*"

  # S3 Bucket Policy for CloudFront Access
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::rowerowy-dolny-slask-vue-app/*"
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessId.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${AppBucketName}/*"


  # CloudFront Origin Access Identity
  CloudFrontOriginAccessId:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Access identity for CloudFront to access S3 bucket.

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticWebsiteBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessId}'
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:586799309278:certificate/fcee0ea2-cfbc-45ff-af1b-ab2771b9c4e4
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Aliases:
          - !Sub 'www.${DomainName}'
          - !Ref DomainName
        HttpVersion: http2
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300

  # Route 53 Record for Frontend
  Route53RecordSetFrontend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Fixed CloudFront Hosted Zone ID

  Route53WWWRecordSetFrontend:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'www.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # Fixed CloudFront Hosted Zone ID

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select [0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNatGateway

  PrivateSubnet1DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet2DefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable

  MongoPasswordSecret:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-mongo-password'
      Description: 'The password for the DocumentDB admin user'
      SecretString: !Ref DocumentDBPassword

  RestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      Cors:
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowCredentials: "'true'"
      Domain:
        DomainName: !Sub 'api.${DomainName}'
        CertificateArn: arn:aws:acm:us-east-1:586799309278:certificate/05e0b124-468b-4f1e-bff7-a66ce7de5647
        Route53:
          HostedZoneId: !Ref HostedZoneId

  NestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/
      Handler: main.handler
      Runtime: nodejs20.x
      MemorySize: 512
      Timeout: 60
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref MongoPasswordSecret
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Sub "arn:aws:s3:::${DomainName}-user-assets/*"
      Environment:
        Variables:
          NODE_ENV: production
          MONGO_USER: roweryAdmin
          MONGO_SECRET_ID: !Ref MongoPasswordSecret
          MONGO_HOST: !GetAtt DocumentDBCluster.Endpoint
          MONGO_PORT: !GetAtt DocumentDBCluster.Port
          MONGO_DB_NAME: rowery
          MONGO_REPLICA_SET: rs0
          MONGO_READ_PREFERENCE: primaryPreferred
          MONGO_RETRY_WRITES: false
          GRAPH_HOPPER_API_URL: !Ref GraphHopperApiUrl
          GRAPH_HOPPER_API_KEY: !Ref GraphHopperApiKey
          AUTH0_ISSUER_URL: 'https://dev-3zf4ofit8rok4lhx.us.auth0.com/'
          AUTH0_AUDIENCE: 'https://api.rowerowydolnyslask'
          ASSETS_BUCKET: !Ref AssetsBucket
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt DocumentDBSecurityGroup.GroupId
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Events:
        Def:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref RestApi

  DocumentDBSubnetGroup:
    Type: AWS::DocDB::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${AWS::StackName}-subnet-group
      DBSubnetGroupDescription: 'Subnet group for DocumentDB'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DocumentDBCluster:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::DocDB::DBCluster
    Properties:
      MasterUsername: roweryAdmin
      MasterUserPassword: !Ref DocumentDBPassword
      DBClusterIdentifier: !Sub ${AWS::StackName}-cluster2
      EngineVersion: '4.0.0'
      VpcSecurityGroupIds:
        - !GetAtt DocumentDBSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DocumentDBSubnetGroup

  DocumentDBInstance:
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Type: AWS::DocDB::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DocumentDBCluster
      DBInstanceClass: db.t4g.medium
      DBInstanceIdentifier: !Sub ${AWS::StackName}-instance2

  DocumentDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for DocumentDB'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 27017
          ToPort: 27017
          CidrIp: 0.0.0.0/0

Outputs:
  WebsiteURL:
    Description: The CloudFront URL of the frontend website.
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: WebsiteURL